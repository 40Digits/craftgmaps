(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/* global google */

// TODO refactor needed - it even affects the js
window.googleMapify = function googleMapify(formattedAddressId, mapId, zoomId, latId, lngId, streetId, cityId, stateId, countryId, zipId) {
  // TODO refactor needed - it's here too
  var formattedAddressEl = document.getElementById(formattedAddressId);
  var mapEl = document.getElementById(mapId);
  var zoomEl = document.getElementById(zoomId);
  var latEl = document.getElementById(latId);
  var lngEl = document.getElementById(lngId);
  var streetEl = document.getElementById(streetId);
  var cityEl = document.getElementById(cityId);
  var stateEl = document.getElementById(stateId);
  var countryEl = document.getElementById(countryId);
  var zipEl = document.getElementById(zipId);
  var geocoder = new google.maps.Geocoder();
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };
  var autocomplete = void 0;

  var mapCenter = {
    lat: parseFloat(latEl.value),
    lng: parseFloat(lngEl.value)
  };
  var zoom = parseInt(zoomEl.value, 0);

  var map = new google.maps.Map(mapEl, {
    center: mapCenter,
    zoom: zoom,
    scrollwheel: false,
    navigationControl: false,
    mapTypeControl: false,
    scaleControl: false,
    draggable: true
  });

  var marker = new google.maps.Marker({
    map: map,
    draggable: true,
    position: mapCenter
  });

  var updateValues = function updateValues(lat, lng, addressComponents) {
    latEl.value = lat;
    lngEl.value = lng;
    zoomEl.value = map.getZoom();

    if (!!addressComponents) {
      streetEl.value = !!addressComponents.street_number ? addressComponents.street_number : '';
      streetEl.value += !!addressComponents.route ? ' ' + addressComponents.route : '';
      cityEl.value = !!addressComponents.locality ? addressComponents.locality : '';
      stateEl.value = !!addressComponents.administrative_area_level_1 ? addressComponents.administrative_area_level_1 : '';
      countryEl.value = !!addressComponents.country ? addressComponents.country : '';
      zipEl.value = !!addressComponents.postal_code ? addressComponents.postal_code : '';
    }
  };

  var geocodeResults = function geocodeResults(results, status, givenLocation) {
    if (status === google.maps.GeocoderStatus.OK && !!results[0]) {
      var result = results[0];
      var location = !!givenLocation ? givenLocation : result.geometry.location;

      map.fitBounds(result.geometry.viewport);
      map.setCenter(location);
      marker.setPosition(location);

      updateValues(location.lat(), location.lng());
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  };

  var onPredictionSelection = function onPredictionSelection() {
    var place = autocomplete.getPlace();
    var addressComponents = {};

    // Get each component of the address from the place details
    // and fill the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType]];
        addressComponents[addressType] = val;
      }
    }

    updateValues(place.geometry.location.lat(), place.geometry.location.lng(), addressComponents);

    map.setCenter(place.geometry.location);
    map.setZoom(15);
    marker.setPosition(place.geometry.location);
  };

  var initAutocomplete = function initAutocomplete() {
    // Create the autocomplete object, restricting the search to geographical location types.
    autocomplete = new google.maps.places.Autocomplete(formattedAddressEl, { types: ['geocode'] });

    // When the user selects an address from the dropdown, populate the address fields in the form.
    autocomplete.addListener('place_changed', onPredictionSelection);
  };

  google.maps.event.addListener(marker, 'dragend', function () {
    geocoder.geocode({
      location: marker.getPosition()
    }, function (results, status) {
      geocodeResults(results, status, marker.getPosition());
    });
  });

  google.maps.event.addListener(map, 'zoom_changed', function () {
    console.log(map.getZoom());
    zoomEl.value = map.getZoom();
  });

  initAutocomplete();
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
